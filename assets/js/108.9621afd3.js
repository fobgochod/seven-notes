(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{505:function(v,_,t){"use strict";t.r(_);var i=t(4),a=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"java基础"}},[v._v("Java基础")]),v._v(" "),_("h3",{attrs:{id:"volatile关键字底层原理"}},[v._v("volatile关键字底层原理")]),v._v(" "),_("ul",[_("li",[v._v("线程可见")]),v._v(" "),_("li",[v._v("防止指令重排序")])]),v._v(" "),_("h3",{attrs:{id:"线程池各个参数含义"}},[v._v("线程池各个参数含义")]),v._v(" "),_("ul",[_("li",[v._v("核心")]),v._v(" "),_("li",[v._v("最大")]),v._v(" "),_("li",[v._v("超时时间")]),v._v(" "),_("li",[v._v("超时时间单位")]),v._v(" "),_("li",[v._v("任务队列")]),v._v(" "),_("li",[v._v("拒绝策略")]),v._v(" "),_("li",[v._v("线程工厂")])]),v._v(" "),_("h3",{attrs:{id:"lock、synchronized-区别"}},[v._v("Lock、synchronized 区别")]),v._v(" "),_("ul",[_("li",[v._v("Lock在功能上是sync的超级")]),v._v(" "),_("li",[v._v("jdk6加入大量针对sync优化之后，行能基本持平")]),v._v(" "),_("li",[v._v("sync语法层面的同步、语法清新简单、未来虚拟机更容易针对其优化")]),v._v(" "),_("li",[v._v("Lock需要手动释放锁，由程序员自己保证")])]),v._v(" "),_("h3",{attrs:{id:"reentrantlock锁公平与非公平实现、重入原理"}},[v._v("ReentrantLock锁公平与非公平实现、重入原理")]),v._v(" "),_("ul",[_("li",[v._v("重写tryAcquire方法")]),v._v(" "),_("li",[v._v("state状态值累计")])]),v._v(" "),_("h3",{attrs:{id:"hashmap扩容时机-容量初始化为1000和10000是否触发扩容-、机制、1-7与1-8的差异"}},[v._v("HashMap扩容时机（容量初始化为1000和10000是否触发扩容）、机制、1.7与1.8的差异")]),v._v(" "),_("h3",{attrs:{id:"concurrenthashmap1-7、1-8的优化与差异-size方法实现差异"}},[v._v("ConcurrentHashMap1.7、1.8的优化与差异，size方法实现差异")]),v._v(" "),_("h3",{attrs:{id:"threadlocal原理与风险、为什么会内存泄露"}},[v._v("ThreadLocal原理与风险、为什么会内存泄露")]),v._v(" "),_("h3",{attrs:{id:"阻塞队列的用途、区别"}},[v._v("阻塞队列的用途、区别")]),v._v(" "),_("h3",{attrs:{id:"linkedblockingqueue对列的add、put区别-实际过程中如何使用"}},[v._v("LinkedBlockingQueue对列的add、put区别，实际过程中如何使用")]),v._v(" "),_("h3",{attrs:{id:"悲观锁、乐观锁、自旋锁的使用场景、实现方式、优缺点"}},[v._v("悲观锁、乐观锁、自旋锁的使用场景、实现方式、优缺点")]),v._v(" "),_("h3",{attrs:{id:"class-forname、loanclass区别"}},[v._v("Class.forName、loanClass区别；")]),v._v(" "),_("h3",{attrs:{id:"线程生命周期、死锁条件与死锁避免、状态转换关系-源码级别"}},[v._v("线程生命周期、死锁条件与死锁避免、状态转换关系（源码级别）；")]),v._v(" "),_("h3",{attrs:{id:"string-intern方法"}},[v._v("String intern方法；")]),v._v(" "),_("h3",{attrs:{id:"cas的优缺点与解决方案、aba问题"}},[v._v("cas的优缺点与解决方案、ABA问题；")]),v._v(" "),_("h2",{attrs:{id:"redis相关"}},[v._v("Redis相关")]),v._v(" "),_("h3",{attrs:{id:"redis高性能原因"}},[v._v("Redis高性能原因")]),v._v(" "),_("h3",{attrs:{id:"redis的部署模式"}},[v._v("Redis的部署模式")]),v._v(" "),_("h3",{attrs:{id:"rediscluster底层原理"}},[v._v("RedisCluster底层原理")]),v._v(" "),_("h3",{attrs:{id:"redis持久化机制"}},[v._v("Redis持久化机制")]),v._v(" "),_("h3",{attrs:{id:"缓存淘汰机制"}},[v._v("缓存淘汰机制")]),v._v(" "),_("h3",{attrs:{id:"缓存穿透、缓存雪崩、缓存击穿发生场景与解决方案"}},[v._v("缓存穿透、缓存雪崩、缓存击穿发生场景与解决方案")]),v._v(" "),_("h2",{attrs:{id:"sql相关"}},[v._v("SQL相关")]),v._v(" "),_("h3",{attrs:{id:"mybatis拦截器的用途"}},[v._v("MyBatis拦截器的用途")]),v._v(" "),_("p",[v._v("分页")]),v._v(" "),_("h3",{attrs:{id:"mybatis动态sql原理"}},[v._v("MyBatis动态SQL原理")]),v._v(" "),_("h3",{attrs:{id:"分库分表方案设计"}},[v._v("分库分表方案设计")]),v._v(" "),_("p",[v._v("水平、垂直、Partition")]),v._v(" "),_("h3",{attrs:{id:"mysql怎么解决幻读、原理-源码级别"}},[v._v("MySQL怎么解决幻读、原理（源码级别）")]),v._v(" "),_("h3",{attrs:{id:"gap锁的作用域原理"}},[v._v("Gap锁的作用域原理")]),v._v(" "),_("h3",{attrs:{id:"rr、rc区别"}},[v._v("RR、RC区别")]),v._v(" "),_("h3",{attrs:{id:"mysql默认的事务隔离级别、oracle默认的事务隔离级别"}},[v._v("MySQL默认的事务隔离级别、Oracle默认的事务隔离级别")]),v._v(" "),_("p",[v._v("可重复读")]),v._v(" "),_("h3",{attrs:{id:"mysql为啥使用b-树索引"}},[v._v("MySQL为啥使用B+树索引")]),v._v(" "),_("p",[v._v("减少IO层数")]),v._v(" "),_("p",[v._v("redo log、binlog、undo\nlog写入顺序、分别保证了ACID的什么特性\n数据库乐观锁")]),v._v(" "),_("h3",{attrs:{id:"mysql优化"}},[v._v("MySQL优化")]),v._v(" "),_("ul",[_("li",[v._v("有序主键")]),v._v(" "),_("li",[v._v("索引")])]),v._v(" "),_("p",[v._v("MySQL底层原理")]),v._v(" "),_("h2",{attrs:{id:"spring相关"}},[v._v("Spring相关")]),v._v(" "),_("h3",{attrs:{id:"bean注解、-component注解区别"}},[v._v("@Bean注解、@Component注解区别")]),v._v(" "),_("ul",[_("li",[v._v("@Bean 作用在方法上，加载第三方jar比较灵活")]),v._v(" "),_("li",[v._v("@Component 作用在类上")])]),v._v(" "),_("h3",{attrs:{id:"spring-aop原理"}},[v._v("Spring Aop原理")]),v._v(" "),_("ul",[_("li",[v._v("动态代理")])]),v._v(" "),_("h3",{attrs:{id:"aspect和普通aop区别"}},[v._v("@Aspect和普通AOP区别")]),v._v(" "),_("ul",[_("li",[v._v("Spring 依然采用运行时生成动态代理的方式来增强目标对象，所以它不需要增加额外的编译，也不需要 AspectJ 的织入器支持；")]),v._v(" "),_("li",[v._v("AspectJ 在采用编译时增强，所以 AspectJ 需要使用自己的编译器来编译 Java 文件，还需要织入器。")])]),v._v(" "),_("h3",{attrs:{id:"自定义拦截器和aop那个先执行"}},[v._v("自定义拦截器和Aop那个先执行")]),v._v(" "),_("h3",{attrs:{id:"web-拦截器"}},[v._v("web 拦截器")]),v._v(" "),_("h3",{attrs:{id:"dispatchservlet原理"}},[v._v("DispatchServlet原理")]),v._v(" "),_("p",[v._v("Filter(tomcat)->Interceptor(请求拦截)-AOP(方法拦截)")]),v._v(" "),_("h2",{attrs:{id:"dubbo相关"}},[v._v("Dubbo相关")]),v._v(" "),_("p",[v._v("Dubbo负载均衡、集群容错\nDubbo SPI机制、Route重写使用场景\nDubbo RPC底层原理\n全链路监控实现原理")]),v._v(" "),_("h2",{attrs:{id:"分布式相关"}},[v._v("分布式相关")]),v._v(" "),_("h3",{attrs:{id:"分布式锁的实现方式"}},[v._v("分布式锁的实现方式")]),v._v(" "),_("ul",[_("li",[v._v("数据库、Redis的SETNX")]),v._v(" "),_("li",[v._v("Zookeeper")])]),v._v(" "),_("p",[v._v("漏斗算法、令牌桶算法\n事务最终一致性解决方案\nSLA\n分布式事务实现方式与区别\nTcc Confirm失败怎么办？\n分布式锁的各种实现方式、对比\n分布式ID的各种实现方式、对比\n雪花算法时钟回拨问题与应对方案\n红锁算法")]),v._v(" "),_("h2",{attrs:{id:"设计模式"}},[v._v("设计模式")]),v._v(" "),_("p",[v._v("常用的设计模式\n状态模式\n责任链模式解决了什么问题\n饿汉式、懒汉式优缺点、使用场景\n模板方法模式、策略模式、单例模式、责任链模式")]),v._v(" "),_("h2",{attrs:{id:"zookeeper"}},[v._v("Zookeeper")]),v._v(" "),_("p",[v._v("Zookeeper底层架构设计\nzk一致性")]),v._v(" "),_("h2",{attrs:{id:"mq"}},[v._v("MQ")]),v._v(" "),_("p",[v._v("Kafka顺序消息\nMQ消息幂等\nKafka高性能秘诀\nKafka高吞吐原理\nRocket事务消息、延时队列")]),v._v(" "),_("h2",{attrs:{id:"计算机网络"}},[v._v("计算机网络")]),v._v(" "),_("p",[v._v("浏览器输入一个url发生了什么\nHttp 1.0、1.1、2.0差异\nIO多路复用\nTCP四次挥手过程、状态切换\nXSS、CRSF攻击与预防\n301、302区别")]),v._v(" "),_("h2",{attrs:{id:"tomcat"}},[v._v("Tomcat")]),v._v(" "),_("p",[v._v("Tomcat大概原理")]),v._v(" "),_("h2",{attrs:{id:"代码"}},[v._v("代码")]),v._v(" "),_("p",[v._v("手写发布订阅模式\n大数（两个String)相加")]),v._v(" "),_("h2",{attrs:{id:"场景问题"}},[v._v("场景问题")]),v._v(" "),_("p",[v._v("打赏排行榜实现\n高并发下的请求合并\nCPU 100%处理经验\n短链系统设计\n附近的人项目实现\n10w个红包秒级发送方案\n延时任务的实现方案与优缺点对比")])])}),[],!1,null,null,null);_.default=a.exports}}]);