(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{548:function(e,i,l){"use strict";l.r(i);var n=l(4),t=Object(n.a)({},(function(){var e=this,i=e._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"线程池可用的各种高并发容器详解-copyonwritelist-blockingqueue等"}},[e._v("线程池可用的各种高并发容器详解：CopyOnWriteList，BlockingQueue等")]),e._v(" "),i("h2",{attrs:{id:"map"}},[e._v("Map")]),e._v(" "),i("blockquote",[i("p",[e._v("Hashtable 方法上加锁 -> HashMap 无锁 -> SynchronizedMap 锁力度变小 -> ConcurrentHashMap CAS")])]),e._v(" "),i("ul",[i("li",[e._v("Hashtable\n"),i("ul",[i("li",[e._v("@since 1.0")]),e._v(" "),i("li",[e._v("加锁 synchronized")]),e._v(" "),i("li",[e._v("同步 线程安全")])])])]),e._v(" "),i("p",[i("img",{attrs:{src:"/images/juc/Hashtable.png",alt:""}})]),e._v(" "),i("ul",[i("li",[e._v("HashMap\n"),i("ul",[i("li",[e._v("@since 1.2")]),e._v(" "),i("li",[e._v("内部无锁 多线程不安全")])])])]),e._v(" "),i("p",[i("img",{attrs:{src:"/images/juc/HashMap.png",alt:""}})]),e._v(" "),i("ul",[i("li",[e._v("Collections.SynchronizedMap\n"),i("ul",[i("li",[e._v("@since 1.2")]),e._v(" "),i("li",[e._v("final Object mutex; //Object on which to synchronize")]),e._v(" "),i("li",[e._v("synchronized (mutex)")])])])]),e._v(" "),i("p",[i("img",{attrs:{src:"/images/juc/SynchronizedMap.png",alt:""}})]),e._v(" "),i("ul",[i("li",[e._v("ConcurrentHashMap\n"),i("ul",[i("li",[e._v("@since 1.5")])])])]),e._v(" "),i("p",[i("img",{attrs:{src:"/images/juc/ConcurrentHashMap.png",alt:""}})]),e._v(" "),i("h2",{attrs:{id:"list、queue"}},[e._v("List、Queue")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("Vector和Hashtable自带锁，基本不用")])]),e._v(" "),i("li",[i("p",[e._v("Vector -> Queue")])]),e._v(" "),i("li",[i("p",[e._v("Queue List区别")])]),e._v(" "),i("li",[i("p",[e._v("Queue添加了对多线程友好的API offer poll peek")])]),e._v(" "),i("li",[i("p",[e._v("BlockingQueue put take 阻塞")])]),e._v(" "),i("li",[i("p",[e._v("Vector")]),e._v(" "),i("ul",[i("li",[e._v("@since 1.0")]),e._v(" "),i("li",[e._v("加锁 synchronized")]),e._v(" "),i("li",[e._v("同步 线程安全")])])])]),e._v(" "),i("p",[i("img",{attrs:{src:"/images/juc/Vector.png",alt:""}})]),e._v(" "),i("ul",[i("li",[e._v("ArrayList\n"),i("ul",[i("li",[e._v("@since 1.2")])])])]),e._v(" "),i("p",[i("img",{attrs:{src:"/images/juc/ArrayList.png",alt:""}})]),e._v(" "),i("ul",[i("li",[e._v("LinkedList\n"),i("ul",[i("li",[e._v("@since 1.2")])])])]),e._v(" "),i("p",[i("img",{attrs:{src:"/images/juc/LinkedList.png",alt:""}})]),e._v(" "),i("ul",[i("li",[e._v("ConcurrentLinkedQueue\n"),i("ul",[i("li",[e._v("@since 1.5")])])])]),e._v(" "),i("p",[i("img",{attrs:{src:"/images/juc/ConcurrentLinkedQueue.png",alt:""}})]),e._v(" "),i("h2",{attrs:{id:"总结"}},[e._v("总结")]),e._v(" "),i("p",[e._v("HashMap\nLinkedHashMap 链表\nTreeMap 红黑树")]),e._v(" "),i("p",[e._v("ConcurrentHashMap\nConcurrentSkipListMap 跳表")]),e._v(" "),i("p",[e._v("CopyOnWriteArrayList")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("BlockingQueue")]),e._v(" "),i("ul",[i("li",[e._v("ConcurrentLinkedQueue")]),e._v(" "),i("li",[e._v("LinkedBlockingQueue 无界 put take")]),e._v(" "),i("li",[e._v("ArrayBlockingQueue 有界")]),e._v(" "),i("li",[e._v("PriorityQueue")]),e._v(" "),i("li",[e._v("DelayQueue 按时间排序 优先执行  按时间进行任务调度")]),e._v(" "),i("li",[e._v("SynchronousQueue 一个线程给另外一个传数据")]),e._v(" "),i("li",[e._v("LinkedTransferQueue")])])]),e._v(" "),i("li",[i("p",[e._v("目标 为ThreadPool做准备")])])])])}),[],!1,null,null,null);i.default=t.exports}}]);